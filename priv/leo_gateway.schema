%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%%======================================================================
%%
%% LeoFS
%%
%% Copyright (c) 2012-2013 Rakuten, Inc.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
%% @author: Yosuke Hara
%%
%%======================================================================
%%======================================================================
%% For app.config
%%======================================================================
%%
%% SASL
%%
%% See: http://www.erlang.org/doc/man/sasl_app.html
%%
%% The following configuration parameters are defined for
%% the SASL application. See app(4) for more information
%% about configuration parameters
%%
%% @doc SASL error log path
{mapping,
 "sasl.sasl_error_log",
 "sasl.sasl_error_logger",
 [
  {datatype, string},
  {default, "./log/sasl/sasl-error.log"}
 ]}.

{translation, "sasl.sasl_error_logger",
 fun(Conf) ->
         Path = cuttlefish_util:conf_get_value("sasl.sasl_error_log", Conf),
         {file, Path}
 end}.

%% @doc Restricts the error logging performed by the specified sasl_error_logger
%%      to error reports, progress reports, or both.
%%      errlog_type = [error | progress | all]
{mapping,
 "sasl.errlog_type",
 "sasl.errlog_type",
 [
  {datatype, atom},
  {default, error}
 ]}.

%% @doc Specifies in which directory the files are stored.
%%      If this parameter is undefined or false, the error_logger_mf_h is not installed.
{mapping,
 "sasl.error_logger_mf_dir",
 "sasl.error_logger_mf_dir",
 [
  {default, "./log/sasl"}
 ]}.

%% @doc Specifies how large each individual file can be.
%%      If this parameter is undefined, the error_logger_mf_h is not installed.
%%
{mapping,
 "sasl.error_logger_mf_maxbytes",
 "sasl.error_logger_mf_maxbytes",
 [
  {datatype, bytesize},
  {default, 10485760}
 ]}.

%% @doc Specifies how many files are used.
%%      If this parameter is undefined, the error_logger_mf_h is not installed.
{mapping,
 "sasl.error_logger_mf_maxfiles",
 "sasl.error_logger_mf_maxfiles",
 [
  {datatype, integer},
  {default, 5}
 ]}.


%%
%% Manager
%%
%% @doc Nodes of manager
{mapping,
 "manager.some.var1",
 "gateway.managers",
 [
  {datatype, atom},
  {default, 'manager_0@127.0.0.1'}
 ]}.

{mapping,
 "manager.some.var2",
 "gateway.managers",
 [
  {datatype, atom},
  {default, 'manager_1@127.0.0.1'}
 ]}.

{translation, "gateway.managers",
 fun(Conf) ->
         Manager_1 = cuttlefish_util:conf_get_value("manager.some.var1", Conf),
         Manager_2 = cuttlefish_util:conf_get_value("manager.some.var2", Conf),
         [Manager_1, Manager_2]
 end}.

%%
%% Gateway
%%
%% @doc LeoFS version
{mapping,
 "gateway.system_version",
 "gateway.system_version",
 [
  {default, "0.16.5"}
 ]}.


%% @doc Gateway’s HTTP API to use: [s3 | rest | embed]
{mapping,
 "gateway.http.handler",
 "gateway.http.handler",
 [
  {datatype, {enum, [s3, rest, embed]}},
  {default, s3}
 ]}.

%% @doc Port number the Gateway uses for HTTP connections
{mapping,
 "gateway.http.port",
 "gateway.http.port",
 [
  {datatype, integer},
  {default, 8080}
 ]}.

%% @doc Numbers of processes listening for connections
{mapping,
 "gateway.http.num_of_acceptors",
 "gateway.http.num_of_acceptors",
 [
  {datatype, integer},
  {default, 128}
 ]}.

%% @doc Maximum number of requests allowed in a single keep-alive session
{mapping,
 "gateway.http.max_keepalive",
 "gateway.http.max_keepalive",
 [
  {datatype, integer},
  {default, 4096}
 ]}.

%% @doc Total number of virtual directories
{mapping,
 "gateway.http.layer_of_dirs",
 "gateway.http.layer_of_dirs",
 [
  {datatype, integer},
  {default, 12}
 ]}.

%% @doc Port number the Gateway uses for HTTPS connections
{mapping,
 "gateway.http.ssl_port",
 "gateway.http.ssl_port",
 [
  {datatype, integer},
  {default, 8443}
 ]}.

%% @doc SSL Certificate file
{mapping,
 "gateway.http.ssl_certfile",
 "gateway.http.ssl_certfile",
 [
  {default, "./etc/server_cert.pem"}
 ]}.

%% @doc SSL key
{mapping,
 "gateway.http.ssl_keyfile",
 "gateway.http.ssl_keyfile",
 [
  {default, "./etc/server_key.pem"}
 ]}.

%% @doc Synchronized time of a bucket property (second)
{mapping,
 "gateway.bucket_prop_sync_interval",
 "gateway.bucket_prop_sync_interval",
 [
  {datatype, integer},
  {default, 300}
 ]}.

%% @doc Total number of chunked objects
{mapping,
 "gateway.large_object.max_chunked_objs",
 "gateway.large_object.max_chunked_objs",
 [
  {datatype, integer},
  {default, 1000}
 ]}.

%% @doc Maximum length of an object
{mapping,
 "gateway.large_object.max_len_for_obj",
 "gateway.large_object.max_len_for_obj",
 [
  {datatype, bytesize},
  {default, 524288000}
 ]}.

%% @doc Length of a chunked object
{mapping,
 "gateway.large_object.chunked_obj_len",
 "gateway.large_object.chunked_obj_len",
 [
  {datatype, bytesize},
  {default, 5242880}
 ]}.

%% @doc Beginning of length of a chunked object
{mapping,
 "gateway.large_object.threshold_obj_len",
 "gateway.large_object.threshold_obj_len",
 [
  {datatype, bytesize},
  {default, 5767168}
 ]}.

%% @doc If this parameter is 'true', Gateway turns on HTTP-based cache server, like Varnish OR Squid.
%%      If this parameter is 'false', Stores objects into the Gateway’s memory.
%%      When operating READ, the Etag of the cache is compared with a backend storage’s Etag.
{mapping,
 "gateway.cache.http_cache",
 "gateway.cache.http_cache",
 [
  {datatype, {enum, [true, false]}},
  {default, false}
 ]}.

%% @doc A number of cache workers
{mapping,
 "gateway.cache.cache_workers",
 "gateway.cache.cache_workers",
 [
  {datatype, integer},
  {default, 16}
 ]}.

%% @doc Memory cache capacity in bytes
{mapping,
 "gateway.cache.cache_ram_capacity",
 "gateway.cache.cache_ram_capacity",
 [
  {datatype, bytesize},
  {default, 1073741824}
 ]}.

%% @doc Disk cache capacity in bytes
{mapping,
 "gateway.cache.cache_disc_capacity",
 "gateway.cache.cache_disc_capacity",
 [
  {datatype, bytesize},
  {default, 524288000}
 ]}.

%% @doc When the length of the object exceeds this value, store the object on disk
{mapping,
 "gateway.cache.cache_disc_threshold_len",
 "gateway.cache.cache_disc_threshold_len",
 [
  {datatype, bytesize},
  {default, 1048576}
 ]}.

%% @doc Directory for the disk cache data
{mapping,
 "gateway.cache.cache_disc_dir_data",
 "gateway.cache.cache_disc_dir_data",
 [
  {default, "./cache/data"}
 ]}.

%% @doc Directory for the disk cache journal
{mapping,
 "gateway.cache.cache_disc_dir_journal",
 "gateway.cache.cache_disc_dir_journal",
 [
  {default, "./cache/journal"}
 ]}.

%% @doc Cache Expire in seconds
{mapping,
 "gateway.cache.cache_expire",
 "gateway.cache.cache_expire",
 [
  {datatype, integer},
  {default, 300}
 ]}.

%% @doc Cache Max Content Length in bytes
{mapping,
 "gateway.cache.cache_max_content_len",
 "gateway.cache.cache_max_content_len",
 [
  {datatype, bytesize},
  {default, 1048576}
 ]}.

%% @doc Cache Content Type(s)
%%      In case of "empty", all objects are cached.
{mapping,
 "gateway.cache.cachable_content_type",
 "gateway.cache.cachable_content_type",
 [
  {default, []}
 ]}.

%% @doc Cache Content Pattern(s)
%%      In case of "empty", all objects are cached.
{mapping,
 "gateway.cache.cachable_path_pattern",
 "gateway.cache.cachable_path_pattern",
 [
  {default, []}
 ]}.

%% @doc Timeout value when requesting to a storage
{mapping,
 "gateway.timeout.level_1",
 "gateway.timeout.level_1",
 [
  {datatype, {duration, ms}},
  {default, 5000}
 ]}.

%% @doc Timeout value when requesting to a storage
{mapping,
 "gateway.timeout.level_2",
 "gateway.timeout.level_2",
 [
  {datatype, {duration, ms}},
  {default, 7000}
 ]}.

%% @doc Timeout value when requesting to a storage
{mapping,
 "gateway.timeout.level_3",
 "gateway.timeout.level_3",
 [
  {datatype, {duration, ms}},
  {default, 10000}
 ]}.

%% @doc Timeout value when requesting to a storage
{mapping,
 "gateway.timeout.level_4",
 "gateway.timeout.level_4",
 [
  {datatype, {duration, ms}},
  {default, 20000}
 ]}.

%% @doc Timeout value when requesting to a storage
{mapping,
 "gateway.timeout.level_5",
 "gateway.timeout.level_5",
 [
  {datatype, {duration, ms}},
  {default, 30000}
 ]}.

%% @doc Log level
{mapping,
 "gateway.log.log_level",
 "gateway.log.log_level",
 [
  {datatype, integer}, %% >> enum
  {default, 1}
 ]}.

%% @doc Is enable access log
{mapping,
 "gateway.log.is_enable_access_log",
 "gateway.log.is_enable_access_log",
 [
  {datatype, {enum, [true, false]}},
  {default, false}
 ]}.

%% @doc Directory of output error-log(s)
{mapping,
 "gateway.log.output_path",
 "gateway.log.log_appender",
 [
  {datatype, string},
  {default, "./log/app"}
 ]}.

{translation, "gateway.log.log_appender",
 fun(Conf) ->
         Path = cuttlefish_util:conf_get_value("gateway.log.output_path", Conf),
         io:format("~p~n", [Path]),
         {file, [{path, Path}]}
 end}.

%% @doc Is enable elasticsearch
{mapping,
 "gateway.log.is_enable_esearch",
 "gateway.log.is_enable_esearch",
 [
  {datatype, {enum, [true, false]}},
  {default, false}
 ]}.

%% @doc Node of Elasticsearch
{mapping,
 "gateway.log.esearch.host",
 "gateway.log.esearch.host",
 [
  {default, "127.0.0.1"}
 ]}.

%% @doc Elasticsearch listening port number
{mapping,
 "gateway.log.esearch.port",
 "gateway.log.esearch.port",
 [
  {datatype, integer},
  {default, 9200}
 ]}.

%% @doc Elasticsearch receive timeout
{mapping,
 "gateway.log.esearch.timeout",
 "gateway.log.esearch.timeout",
 [
  {datatype, integer},
  {default, 5000}
 ]}.

%% @doc Duration of stack objects
{mapping,
 "gateway.log.esearch.esearch_bulk_duration",
 "gateway.log.esearch.esearch_bulk_duration",
 [
  {datatype, integer},
  {default, 3000}
 ]}.

%% @doc Directory of queue for monitoring "RING"
{mapping,
 "gateway.queue_dir",
 "gateway.queue_dir",
 [
  {default, "./work/queue"}
 ]}.

%% @doc Directory of SNMP agent configuration
{mapping,
 "gateway.snmp_agent",
 "gateway.snmp_agent",
 [
  {default, "./snmp/snmpa_gateway_0/LEO-GATEWAY"}
 ]}.


%%======================================================================
%% For vm.args
%%======================================================================
%%%% Tunables
%% @doc Name of the riak node
{mapping,
 "nodename",
 "vm_args.-name",
 [
  {default, "gateway_0@127.0.0.1"}
 ]}.

%% @doc Cookie for distributed node communication.  All nodes in the same cluster
%% should use the same cookie or they will not be able to communicate.
{mapping,
 "distributed_cookie",
 "vm_args.-setcookie",
 [
  {default, "leofs"}
 ]}.

{mapping,
 "erlang.kernel_poll",
 "vm_args.+K",
 [
  {default, "true"}
 ]}.

{mapping,
 "erlang.asyc_threads",
 "vm_args.+A",
 [
  {default, "32"}
 ]}.

%% @doc Increase number of concurrent ports/sockets
{mapping,
 "erlang.max_ports",
 "vm_args.-env ERL_MAX_PORTS",
 [
  {default, "64000"}
 ]}.

%% @doc Tweak GC to run more often
{mapping,
 "erlang.fullsweep_after",
 "vm_args.-env ERL_FULLSWEEP_AFTER",
 [
  {default, "0"},
  {level, advanced}
 ]}.

%% @doc Set the location of crash dumps
{mapping,
 "erlang.crash_dump",
 "vm_args.-env ERL_CRASH_DUMP",
 [
  {default, "./log/erl_crash.dump"}
 ]}.

%% @doc Raise the ETS table limit
{mapping,
 "erlang.max_ets_tables",
 "vm_args.-env ERL_MAX_ETS_TABLES",
 [
  {default, "256000"}
 ]}.

%% @doc Raise the ETS table limit
{mapping,
 "erlang.hidden_flag",
 "vm_args.-hidden",
 [
  {default, ""}
 ]}.

%% @doc Raise the default erlang process limit
{mapping, "process_limit", "vm_args.+P",
 [
  {datatype, integer},
  {default, 1048576}
 ]}.

{translation, "vm_args.+P",
 fun(Conf) ->
         Procs = cuttlefish_util:conf_get_value("process_limit", Conf),
         integer_to_list(Procs)
 end}.


%% @doc configuration path of the leofs gateway's snmp-agent
%% See: http://www.leofs.org/docs/configuration.html#snmpa-setup
{mapping,
 "snmp_conf",
 "vm_args.-config",
 [
  {default, "./snmp/snmpa_gateway_0/leo_gateway_snmp"}
 ]}.
